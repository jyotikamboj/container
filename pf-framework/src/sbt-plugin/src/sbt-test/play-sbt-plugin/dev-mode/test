# Structure of this test:
# =======================

# First we test that the different watchers correctly detect events such as changing a file, creating a new file,
# changing that new file, and deleting a file.

# Then we test the specifics of the reloader - for example, ensuring that it only reloads when the classpath changes,
# and testing failure conditions.

# Additionally, when making assertions about reloads, we need to wait at least a second after changing the file before
# we make a request.  The reason for this is that the classpath change detection is based on file modification times,
# which only have 1 second precision

# Watcher tests
# -------------

# SBT watcher
# - - - - - -

# Start dev mode
> run

# Existing file change detection
> verify-resource-contains /assets/css/some.css 200 original
$ copy-file changes/some.css.1 public/css/some.css
> verify-resource-contains /assets/css/some.css 200 first
$ delete public/css/some.css
> verify-resource-contains /assets/css/some.css 404

# New file change detection
> verify-resource-contains /assets/new/new.css 404
$ copy-file changes/new.css public/new/new.css
> verify-resource-contains /assets/new/new.css 200 original
# Need to wait a little while, because incremental compilation timestamps.
$ sleep 1000
$ copy-file changes/new.css.1 public/new/new.css
> verify-resource-contains /assets/new/new.css 200 first
$ delete public/new/new.css
> verify-resource-contains /assets/new/new.css 404

> play-stop
$ copy-file changes/some.css.0 public/css/some.css
$ delete public/new

# JDK7 watcher
# - - - - - -

> set PlayKeys.playWatchService <<= DevModeBuild.jdk7WatchService

# Start dev mode
> run

# Existing file change detection
> verify-resource-contains /assets/css/some.css 200 original
$ copy-file changes/some.css.1 public/css/some.css
> verify-resource-contains /assets/css/some.css 200 first
$ delete public/css/some.css
> verify-resource-contains /assets/css/some.css 404

# New file change detection
> verify-resource-contains /assets/new/new.css 404
$ copy-file changes/new.css public/new/new.css
> verify-resource-contains /assets/new/new.css 200 original
# Need to wait a little while, because incremental compilation timestamps.
$ sleep 1000
$ copy-file changes/new.css.1 public/new/new.css
> verify-resource-contains /assets/new/new.css 200 first
$ delete public/new/new.css
> verify-resource-contains /assets/new/new.css 404

> play-stop
$ copy-file changes/some.css.0 public/css/some.css
$ delete public/new

# JNotify watch service
# - - - - - - - - - - -

> set PlayKeys.playWatchService <<= DevModeBuild.jnotifyWatchService

# Start dev mode
> run

# Existing file change detection
> verify-resource-contains /assets/css/some.css 200 original
$ copy-file changes/some.css.1 public/css/some.css
> verify-resource-contains /assets/css/some.css 200 first
$ delete public/css/some.css
> verify-resource-contains /assets/css/some.css 404

# New file change detection
> verify-resource-contains /assets/new/new.css 404
$ copy-file changes/new.css public/new/new.css
> verify-resource-contains /assets/new/new.css 200 original
# Need to wait a little while, because incremental compilation timestamps.
$ sleep 1000
$ copy-file changes/new.css.1 public/new/new.css
> verify-resource-contains /assets/new/new.css 200 first
$ delete public/new/new.css
> verify-resource-contains /assets/new/new.css 404

> play-stop
$ copy-file changes/some.css.0 public/css/some.css
$ delete public/new

# Reloader tests
# --------------

> reset-reloads
> run

# Check various action types
> verify-resource-contains / 200 original
> verify-resource-contains /assets/css/some.css 200 original
> verify-resource-contains /assets/main.css 200 original
> verify-reloads 1

# Wait a while and ensure we still haven't reloaded
$ sleep 1000
> verify-resource-contains / 200
> verify-reloads 1

# Change a scala file
$ copy-file changes/Application.scala.1 app/controllers/Application.scala
$ sleep 1000
> verify-resource-contains / 200 first
> verify-reloads 2

# Change a static asset
$ copy-file changes/some.css.1 public/css/some.css
$ sleep 1000
> verify-resource-contains /assets/css/some.css 200 first
# No reloads should have happened
> verify-reloads 2

# Change a compiled asset
$ copy-file changes/main.less.1 app/assets/main.less
$ sleep 1000
> verify-resource-contains /assets/main.css 200 first
# No reloads should have happened
> verify-reloads 2

# Introduce a compile error
$ copy-file changes/Application.scala.2 app/controllers/Application.scala
$ sleep 1000
> verify-resource-contains / 500
> verify-reloads 2

# Fix the compile error
$ copy-file changes/Application.scala.3 app/controllers/Application.scala
$ sleep 1000
> verify-resource-contains / 200 second
> verify-reloads 3

# Change a resource (also introduces a startup failure)
$ copy-file changes/application.conf.1 conf/application.conf
$ sleep 1000
> verify-resource-contains / 500
> verify-reloads 4

> play-stop

