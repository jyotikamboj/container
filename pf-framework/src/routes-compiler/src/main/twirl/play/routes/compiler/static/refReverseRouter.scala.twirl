@import play.routes.compiler._
@import play.routes.compiler.templates._
@(pkg: Option[String], routes: Seq[Route], namespaceReverseRouter: Boolean, useInjector: Route => Boolean)

@for((packageName, routes) <- groupRoutesByPackage(routes)) {
@markLines(routes: _*)
package @(pkg.filter(_ => namespaceReverseRouter).fold(packageName)(_ + "." + packageName)).ref @ob
@* This import statement is inserted mostly for the doc code samples, to ensure that controllers relative
   to the namespace are in scope *@
@for(p <- pkg if namespaceReverseRouter) {import @(p)._}
@for((controller, routes) <- groupRoutesByController(routes)) {
  @markLines(routes: _*)
  class Reverse@(controller.replace(".", "_"))(_prefix: => String) @ob
  @for(((method, _), routes @ Seq(route, _*)) <- groupRoutesByMethod(routes)) {
    @markLines(routes: _*)
    def @(method)(@refReverseSignature(routes)): play.api.mvc.HandlerRef[_] = new play.api.mvc.HandlerRef(
      @refCall(route, useInjector),
      HandlerDef(this.getClass.getClassLoader, "@pkg.getOrElse("")", "@(packageName).@(controller)",
        "@method", Seq(@route.call.parameters.getOrElse(Nil).map("classOf[" + _.typeName + "]").mkString(", ")),
        "@route.verb", @tq@route.comments.map(_.comment).mkString("\n")@tq, _prefix + @tq@route.path@tq
      )
    )
  }
  @cb
}

@cb
}