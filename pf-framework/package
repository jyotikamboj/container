#! /bin/bash

# Copyright (C) 2009-2013 Typesafe Inc. <http://www.typesafe.com>

set -e

DIR=`dirname "$0"`

PUBLISH=1
TAG=1
CLEAN=0
PUBLISHCMD="publish-local-signed"
GITBRANCH=`git rev-parse --abbrev-ref HEAD`
CROSSBUILD="2.11.1"

usage() {
    echo "Usage:"
    echo "$0 -v <version> [ -hpt ] [ -c <scalaversions> ]"
    echo ""
    echo "  -v The version of Play to release"
    echo "  -h Display this help and exit"
    echo "  -p Publish the release"
    echo "  -t Tag the release"
    echo "  -n Don't do a clean first"
    echo "  -c Cross build against the comma separated list of versions, default: $CROSSBUILD"
    echo
    echo "Unsupported options:"
    echo "  -a API docs (aggregated documentation is published by omnidoc)"
    exit $1
}

while getopts ":hnptv:a:c:" opt
do
    case $opt in
        h)
            usage 0
            ;;
        p)
            PUBLISH=0
            PUBLISHCMD="publish-signed"
            ;;
        v)
            export PLAY_VERSION="$OPTARG"
            ;;
        a)
            APIDOCSCLONE="$OPTARG"
            ;;
        t)
            TAG=0
            ;;
        n)
            CLEAN=1
            ;;
        c)
            CROSSBUILD="$OPTARG"
            ;;
        :)
            echo "Option -$OPTARG requires an argument" >&2
            usage 1
            ;;
        *)
            echo "Invalid option: -$OPTARG" >&2
            usage 1
            ;;
    esac
done

if [ $OPTIND -le $# ]
then
    shift $(($OPTIND-1))
    echo "Invalid argument: $1"
    usage 1
fi

if [ -z "$PLAY_VERSION" ]
then
    echo "Play version not set" >&2
    usage 1
fi

if [ $PUBLISH -eq 0 ]
then
    echo "This build will publish Play ${PLAY_VERSION}"
    if [ $TAG == 0 ]
    then
        echo "It will also tag the repository"
    fi
    if [ -n "$APIDOCSCLONE" ]
    then
        echo "Note: aggregated documentation is published by omnidoc"
    fi
    read -p "Are you sure you want to continue? [y/n] " CONFIRM
    if [ $CONFIRM != "y" ]
    then
        echo "Cancelling"
        exit
    fi
else
    echo "Building Play, but not publishing anything"
fi

if [ $CLEAN -eq 0 ]
then
    "$DIR/build" clean
fi

"$DIR/build" -Dgenerate.doc=true $PUBLISHCMD

for v in $(echo $CROSSBUILD | sed "s/,/ /")
do
    if [ -n "$v" ]
    then
        echo "Cross building Play against Scala $v"
        "$DIR/build" -Dgenerate.doc=true -Dscala.version=$v $PUBLISHCMD
    fi
done

if [ $TAG -eq 0 ]
then
    echo "Tagging..."
    git tag -a -s -m "Releasing $PLAY_VERSION" $PLAY_VERSION
    if [ $PUBLISH -eq 0 ]
    then
        git push origin $PLAY_VERSION
    fi
fi
